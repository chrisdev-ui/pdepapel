generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String           @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  types      Type[]           @relation("StoreToType")
  billboards Billboard[]      @relation("StoreToBillboard")
  posts      Post[]           @relation("StoreToPost")
  categories Category[]       @relation("StoreToCategory")
  sizes      Size[]           @relation("StoreToSize")
  colors     Color[]          @relation("StoreToColor")
  designs    Design[]         @relation("StoreToDesign")
  products   Product[]        @relation("StoreToProduct")
  orders     Order[]          @relation("StoreToOrder")
  mainBanner MainBanner?      @relation("StoreToMainBanner")
  banners    Banner[]         @relation("StoreToBanner")
  reviews    Review[]         @relation("StoreToReview")
  shippings  Shipping[]       @relation("StoreToShipping")
  payments   PaymentDetails[] @relation("StoreToPaymentDetails")
  suppliers  Supplier[]       @relation("StoreToSupplier")
  coupons    Coupon[]         @relation("StoreToCoupons")
}

model Billboard {
  id          String   @id @default(uuid())
  storeId     String
  label       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrl    String
  redirectUrl String?
  title       String?
  store       Store    @relation("StoreToBillboard", fields: [storeId], references: [id])

  @@index([storeId])
}

model Post {
  id        String   @id @default(uuid())
  storeId   String
  social    Social
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store    @relation("StoreToPost", fields: [storeId], references: [id])

  @@index([storeId])
}

model Type {
  id         String     @id @default(uuid())
  storeId    String
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  store      Store      @relation("StoreToType", fields: [storeId], references: [id])
  categories Category[]

  @@index([storeId])
}

model Category {
  id        String    @id @default(uuid())
  storeId   String
  typeId    String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  type      Type      @relation(fields: [typeId], references: [id])
  products  Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([typeId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Design {
  id        String    @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  store     Store     @relation("StoreToDesign", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  categoryId  String
  name        String
  description String      @db.Text
  stock       Int
  price       Float
  acqPrice    Float?      @default(0)
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizeId      String
  colorId     String
  designId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sku         String      @unique
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size        Size        @relation(fields: [sizeId], references: [id])
  color       Color       @relation(fields: [colorId], references: [id])
  design      Design      @relation(fields: [designId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  reviews     Review[]
  supplierId  String?
  supplier    Supplier?   @relation(fields: [supplierId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([designId])
  @@index([supplierId])
  @@fulltext([name])
  @@fulltext([name, description])
}

model Supplier {
  id        String   @id @default(uuid())
  storeId   String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store     Store    @relation("StoreToSupplier", fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  isMain    Boolean  @default(false)

  @@index([productId])
}

model Order {
  id          String          @id @default(uuid())
  storeId     String
  phone       String          @default("")
  address     String          @default("")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderNumber String          @unique
  fullName    String          @default("")
  documentId  String?         @default("")
  status      OrderStatus     @default(CREATED)
  userId      String?         @default("")
  guestId     String?         @default("")
  subtotal    Float           @default(0)
  discount    Float           @default(0)
  discountType    DiscountType?
  discountReason  String?
  couponId        String?
  couponDiscount  Float       @default(0)
  total       Float           @default(0)
  coupon      Coupon?         @relation(fields: [couponId], references: [id])
  store       Store           @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  shipping    Shipping?
  payment     PaymentDetails?

  @@index([storeId])
  @@index([couponId])
  @@index([storeId, status])
  @@index([userId, storeId])
  @@index([guestId, storeId])
  @@index([createdAt])
  @@index([status, createdAt])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model MainBanner {
  id           String   @id @default(uuid())
  storeId      String   @unique
  title        String?  @default("")
  label1       String?  @default("")
  highlight    String?  @default("")
  label2       String?  @default("")
  imageUrl     String
  callToAction String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  store        Store    @relation("StoreToMainBanner", fields: [storeId], references: [id])

  @@index([storeId])
}

model Banner {
  id           String   @id @default(uuid())
  storeId      String
  imageUrl     String
  callToAction String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  store        Store    @relation("StoreToBanner", fields: [storeId], references: [id])

  @@index([storeId])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Float
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  storeId   String
  name      String
  store     Store    @relation("StoreToReview", fields: [storeId], references: [id])
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([storeId])
}

model Shipping {
  id           String         @id @default(uuid())
  orderId      String         @unique
  status       ShippingStatus @default(Preparing)
  courier      String?
  cost         Float?
  trackingCode String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  storeId      String
  store        Store          @relation("StoreToShipping", fields: [storeId], references: [id])
  order        Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([storeId])
}

model PaymentDetails {
  id            String        @id @default(uuid())
  orderId       String        @unique
  method        PaymentMethod @default(BankTransfer)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  storeId       String
  details       String?       @default("")
  store         Store         @relation("StoreToPaymentDetails", fields: [storeId], references: [id])
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([storeId])
}

model Coupon {
  id            String         @id @default(uuid())
  storeId       String
  code          String         @unique
  type          DiscountType
  amount        Float
  startDate     DateTime
  endDate       DateTime
  maxUses       Int?           @default(99)
  usedCount     Int            @default(0)
  isActive      Boolean        @default(true)
  minOrderValue Float?         @default(0)
  orders        Order[]        
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  store         Store          @relation("StoreToCoupons", fields: [storeId], references: [id])

  @@unique([storeId, code])
  @@index([storeId])
  @@index([code])
  @@index([isActive])
  @@index([startDate, endDate])
  @@index([usedCount, maxUses])
  @@index([storeId, isActive, startDate, endDate])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum OrderStatus {
  CREATED
  PENDING
  PAID
  CANCELLED
}

enum PaymentMethod {
  COD
  BankTransfer
  Wompi
  PayU
}

enum ShippingStatus {
  Preparing
  Shipped
  InTransit
  Delivered
  Returned
}

enum Social {
  Facebook
  Instagram
  Twitter
  TikTok
  Pinterest
  Youtube
}
