datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Store {
  id          String      @id @default(uuid())
  name        String
  userId      String
  types       Type[]      @relation("StoreToType")
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[]  @relation("StoreToCategory")
  sizes       Size[]      @relation("StoreToSize")
  colors      Color[]     @relation("StoreToColor")
  designs     Design[]    @relation("StoreToDesign")
  products    Product[]   @relation("StoreToProduct")
  orders      Order[]     @relation("StoreToOrder")
  mainBanner  MainBanner? @relation("StoreToMainBanner")
  banners     Banner[]    @relation("StoreToBanner")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String?
  imageUrl    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Type {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToType", fields: [storeId], references: [id])
  name        String
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  typeId      String
  type        Type        @relation(fields: [typeId], references: [id])
  products    Product[]   @relation("CategoryToProduct")
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([typeId])
}

model Size {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[]   
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Color {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Design {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToDesign", fields: [storeId], references: [id])
  name        String
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description String      @db.Text
  stock       Int
  ratings     Float       @default(0)
  price       Float
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizeId      String
  size        Size        @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color       @relation(fields: [colorId], references: [id])
  designId    String
  design      Design      @relation(fields: [designId], references: [id])
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([designId])
}

model Image {
  id          String      @id @default(uuid())
  productId   String
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
}

model Order {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean     @default(false)
  isDelivered Boolean     @default(false)
  phone       String      @default("")
  address     String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id          String      @id @default(uuid())
  orderId     String
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product     @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model MainBanner {
  id            String    @id @default(uuid())
  storeId       String    @unique
  store         Store     @relation("StoreToMainBanner", fields: [storeId], references: [id])
  title         String?   @default("")
  label1        String?   @default("")
  highlight     String?   @default("")
  label2        String?   @default("")
  imageUrl      String
  callToAction  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([storeId])
}

model Banner {
  id            String    @id @default(uuid())
  storeId       String
  store         Store     @relation("StoreToBanner", fields: [storeId], references: [id])
  imageUrl      String
  callToAction  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([storeId])
}


